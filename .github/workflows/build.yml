name: Build App
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*"

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows, macos]
        include:
          - build: linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-musl
            # archive-name: target-linux.tar.gz
          - build: windows
            os: windows-latest
            rust: stable-x86_64-msvc
            target: x86_64-pc-windows-msvc
            # archive-name: target-windows.tar.gz
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            # archive-name: target-macos.tar.gz
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install app dependencies
        run: npm install

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-20.04'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gnome-video-effects gnome-video-effects-extra
          version: 1.1

      - name: rust cache restore
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build for Ubuntu
        if: matrix.os == 'ubuntu-20.04'
        run: npm run tauri build

      - name: Upload for Ubuntu Deb
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu-build-dev
          path: ./src-tauri/target/release/bundle/deb/testtauri_0.0.1_amd64.deb

      - name: Upload for Ubuntu AppImage
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu-build-dev
          path: ./src-tauri/target/release/bundle/appimage/testtauri_0.0.1_amd64.AppImage

      - name: Build for MacOS
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          npm run tauri build

      - name: Upload for Mac App
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v1
        with:
          name: mac-build
          path: ./src-tauri/target/release/bundle/macos/testtauri.app

      - name: Upload for Mac Dmg
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v1
        with:
          name: mac-build
          path: ./src-tauri/target/release/bundle/dmg/testtauri_0.0.1_x64.dmg

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          npm run tauri build

      - name: Upload for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v1
        with:
          name: windows-build
          path: ./src-tauri/target/release/bundle/msi/testtauri_0.0.1_x64_en-US.msi
